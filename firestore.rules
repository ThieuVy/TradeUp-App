rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {

        // =====================================================================
        // 1. HÀM HỖ TRỢ
        // =====================================================================
        function isAuthenticated() {
            return request.auth != null;
        }
        function isOwner(userId) {
            return isAuthenticated() && request.auth.uid == userId;
        }
        function isAdmin() {
            return isAuthenticated() && request.auth.token.admin == true;
        }

        // =====================================================================
        // 2. QUY TẮC CHO TỪNG BỘ SƯU TẬP
        // =====================================================================

        // --- Người dùng (users) ---
        match /users/{userId} {
            allow read: if isAuthenticated();
            allow write: if isOwner(userId) || isAdmin();

            // QUY TẮC ĐÃ SỬA LỖI: Cho phép người dùng tạo, đọc, VÀ CẬP NHẬT
            // lịch sử xem của chính họ.
            match /viewHistory/{listingId} {
                // Hợp nhất create và update vào chung một quyền 'write'
                // hoặc liệt kê rõ ràng: allow read, create, update
                allow read, create, update: if isOwner(userId);
                allow delete: if false; // Vẫn giữ nguyên việc không cho phép xóa
            }
        }

        match /notifications/{notificationId} {
            // Ai được ĐỌC TỪNG document?
            // -> Chủ sở hữu của thông báo đó (dựa vào trường userId trong document).
            allow get: if isOwner(resource.data.userId);

            // Ai được TRUY VẤN DANH SÁCH?
            // -> Bất kỳ người dùng đã đăng nhập nào cũng có thể thực hiện
            // truy vấn "where('userId', '==', their_own_id')".
            allow list: if isAuthenticated();

            // Ai được CẬP NHẬT/XÓA?
            // -> Chủ sở hữu của thông báo đó.
            allow update, delete: if isOwner(resource.data.userId);

            // Ai được TẠO?
            // -> Không ai từ client, chỉ từ Cloud Functions.
            allow create: if false;
        }

        // --- Tin đăng (listings) ---
        match /listings/{listingId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.sellerId;
            allow update: if isAuthenticated() && (request.auth.uid == resource.data.sellerId || isAdmin());
            allow delete: if isAuthenticated() && (request.auth.uid == resource.data.sellerId || isAdmin());
        }

        // --- Trò chuyện (chats) & Tin nhắn (messages) ---
        match /chats/{chatId} {
            function isChatMember() {
                // Kiểm tra xem người dùng có phải là thành viên trong document hiện tại không
                return request.auth.uid in resource.data.members;
            }
            function isCreatingChatMember() {
                // Kiểm tra xem người dùng có phải là thành viên trong document đang được tạo không
                return request.auth.uid in request.resource.data.members;
            }

            allow read, delete: if isChatMember();
            allow create: if isCreatingChatMember();
            allow update: if isChatMember() &&
                    request.resource.data.keys().hasOnly(['lastMessage', 'timestamp', 'lastMessageSenderId']);

            match /messages/{messageId} {
                // Ai được ĐỌC tin nhắn? -> Thành viên của cuộc trò chuyện.
                // Sử dụng hàm get() để truy cập document cha (chat).
                allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;

                // Ai được TẠO tin nhắn? -> Thành viên của cuộc trò chuyện VÀ là người gửi tin nhắn.
                allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members &&
                        request.auth.uid == request.resource.data.senderId;

                // Ai được XÓA tin nhắn? -> Bất kỳ thành viên nào của cuộc trò chuyện.
                // Logic này cho phép người dùng xóa toàn bộ cuộc trò chuyện của họ.
                allow delete: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;

                // Không cho phép CẬP NHẬT tin nhắn sau khi đã gửi.
                allow update: if false;
            }
        }

        // --- Các quy tắc khác giữ nguyên ---
        match /offers/{offerId} {
            allow read: if isAuthenticated() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
            allow create: if isAuthenticated() && isOwner(request.resource.data.buyerId);
            allow update: if isAuthenticated() && (isOwner(resource.data.sellerId) || isOwner(resource.data.buyerId));
            allow delete: if false;
        }

        match /transactions/{transactionId} {
            // Cho phép lấy MỘT giao dịch nếu bạn là người mua hoặc người bán
            allow get: if isAuthenticated() &&
                    (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);

            // Cho phép TRUY VẤN DANH SÁCH nếu đã đăng nhập.
            // Việc giới hạn người dùng chỉ thấy giao dịch của mình đã được xử lý an toàn
            // trong code của ứng dụng (trong HistoryRepository).
            allow list: if isAuthenticated();

            // Giữ nguyên các quyền khác
            allow create, update, delete: if false;
        }

        match /reviews/{reviewId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reviewerId;
            allow update, delete: if false;
        }

        match /reports/{reportId} {
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reporterId;
            allow read, update, delete: if isAdmin();
        }

        match /blocked_users/{blockId} {
            allow create: if isAuthenticated() && isOwner(request.resource.data.blockerId);
            allow read, delete: if isAuthenticated() && isOwner(resource.data.blockerId);
            allow update: if false;
        }

        match /categories/{categoryId} {
            allow read: if isAuthenticated();
            allow write: if isAdmin();
        }

        match /escrows/{escrowId} {
            allow read: if isAdmin() || (isAuthenticated() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId));
            allow write: if false;
        }
    }
}